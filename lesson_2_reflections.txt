What happens when you initialize a repository? Why do you need to do it?

A .git file is created.  It appears git sets itself up to begin making commits.  

How is the staging area different from the working directory and the repository?  What value do you think it offers?  

The staging area may contain all, some or none of the files in the working direcotry and repository.  The value it offers it enabling you to see what is going to be committed before actualling making the commit which allows you to make any required changes prior to the commit.

How can you use the staging area to make sure you have one commit per logical change?

You can use git diff to verify the change between the working directory and the staging area to see what changes have been made. If a single logical change was made then it would be a good idea to make a commit.

I am going to use this line to practice my knowledge of using the staging area to compare files in the working directory with those that are staged and with those in the master commit 

Ok, I saved the file after adding 13 and then staged it. I ran git diff.  Nothing showed.  I will now save again and run git diff.  Also I will run git diff --staged.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

When developing a new feature you are not sure you want included with your main build.

How do the diagrams help you visualize the branch structure?

They show you the relationship between commits back to a joint parent.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging two branches effectively combines all commits to the same branch.  The diagrm shows the relationship which results
in all prior commits from both branches being accessable from the new master.